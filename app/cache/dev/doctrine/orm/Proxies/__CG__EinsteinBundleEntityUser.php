<?php

namespace Proxies\__CG__\EinsteinBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \EinsteinBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'nick', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'cellPhone', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'specialty', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'created', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'updated', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'deleted', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'type', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'gender', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'user'];
        }

        return ['__isInitialized__', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'nick', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'email', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'cellPhone', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'specialty', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'created', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'updated', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'deleted', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'id', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'type', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'gender', '' . "\0" . 'EinsteinBundle\\Entity\\User' . "\0" . 'user'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setNick($nick)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNick', [$nick]);

        return parent::setNick($nick);
    }

    /**
     * {@inheritDoc}
     */
    public function getNick()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNick', []);

        return parent::getNick();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setCellPhone($cellPhone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCellPhone', [$cellPhone]);

        return parent::setCellPhone($cellPhone);
    }

    /**
     * {@inheritDoc}
     */
    public function getCellPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCellPhone', []);

        return parent::getCellPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpecialty($specialty)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpecialty', [$specialty]);

        return parent::setSpecialty($specialty);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecialty()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecialty', []);

        return parent::getSpecialty();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeleted($deleted)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeleted', [$deleted]);

        return parent::setDeleted($deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeleted', []);

        return parent::getDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setType(\EinsteinBundle\Entity\TypeUser $type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setGender(\EinsteinBundle\Entity\Gender $gender = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGender', [$gender]);

        return parent::setGender($gender);
    }

    /**
     * {@inheritDoc}
     */
    public function getGender()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGender', []);

        return parent::getGender();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

}
